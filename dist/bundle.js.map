{"version":3,"sources":["webpack://unischeduler_web_ts/./src/unischeduler.ts","webpack://unischeduler_web_ts/webpack/startup"],"names":["reClassName","reClassSection","reClassTime","reLeadingLineWhitespace","reEndingLineWhitespace","createClassSection","className","type","weekdays","startTime","endTime","location","professors","startDate","endDate","byDay","match","toString","dtstart","makeDateTime","date","byday","toLowerCase","includes","toUTCString","slice","setUTCDate","getUTCDate","setTrueWeekday","dtend","until","setUTCHours","summary","description","replace","exclude","rrule","time","timeInfo","exec","groups","Error","datetime","Date","hours","parseInt","noonIncrement","isAfterNoon","setUTCMinutes","minutes","add_exdates","icalEvent","exdates","getUTCHours","getUTCMinutes","exdatesCopies","exdate","newDate","getTime","push","normalizeWhitespace","str","getAllRegexMatches","regex","matches","window","convertToIcal","schedule","isUCF","timezone","trim","class_sections","classNames","classSectionBatches","split","shift","all_class_sections","i","length","rawSectionBatch","sectionType","sectionBatch","lastSectionType","section","info","parseSchedule","no_school_events","firstSectionStartDate","year","getUTCFullYear","term","sectionDate","start_month","getUTCMonth","getSectionTerm","json","fetch","exception","console","log","events","event","terms","tags","getUCFNoSchoolEvents","dates","noSchoolEvent","day_count","map","d","make_timeless_exdates","name","classSections","noSchoolEvents","ics","ICS","tz","creationDate","toDatetime","ical","e","toExdateList","toDate","normalize","createIcalString","this","dt","toTime","pad","getUTCSeconds","join","foldLine","n","line","parts"],"mappings":"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","file":"bundle.js","sourcesContent":["// Good luck figuring this out!\nconst reClassName = /[A-Z]{3}[A-Z]* \\d+[A-Z]? - .+/g;\nconst reClassSection = /(?:(?<sectionType>[A-Z][a-z]+)\\n)?(?<weekdays>(?:[A-Z][a-z])+)\\s+(?<startTime>\\d\\d?:\\d\\d(?:AM|PM))\\s+-\\s+(?<endTime>\\d\\d?:\\d\\d(?:AM|PM))\\n(?<location>.+)\\n(?<professors>\\D+)(?<dtstart>[\\d/]+)\\s+-\\s+(?<dtend>[\\d/]+)/g;\nconst reClassTime = /(?<hours>\\d+)(?::)(?<minutes>\\d+)(?<isAfterNoon>PM)?/;\n\n// Yes, they MUST be separate and CANNOT be combined\n// Otherwise, js can sometimes remove necessary newlines\nconst reLeadingLineWhitespace = /(^\\s+)/gm\nconst reEndingLineWhitespace = /(\\s+$)/gm\n\n\nconst NUMBER_OF_MILLIS_IN_DAY = 86400000\n\ninterface RRule {\n    byDay: string;\n    until: Date;\n}\n\ninterface IcalEvent {\n    summary: string;\n    dtstart: Date;\n    dtend: Date;\n    description: string;\n}\n\ninterface ClassSectionEvent extends IcalEvent {\n    location: string;\n    exclude: Date[];\n    rrule: RRule;\n\n}\n\nfunction createClassSection(\n    className: string, type: string, weekdays: string,\n    startTime: string, endTime: string, location: string,\n    professors: string, startDate: string, endDate: string): ClassSectionEvent {\n    let byDay = weekdays.match(/../g).toString();\n    let dtstart = makeDateTime(startDate, startTime);\n    setTrueWeekday(dtstart, byDay);\n    let dtend = makeDateTime(startDate, endTime);\n    dtend.setUTCDate(dtstart.getUTCDate());\n    let until = makeDateTime(endDate, endTime);\n    until.setUTCHours(0, 0, 0, 0);\n    return {\n        summary: `${className} (${type})`,\n        dtstart: dtstart,\n        dtend: dtend,\n        location: location,\n        description: \"Professors: \" + professors.replace(/\\n/gm, ' '),\n        exclude: [],\n        rrule: {\n            byDay: byDay,\n            until: until,\n        }\n    }\n}\n\nfunction makeDateTime(date: string, time: string) {\n    let timeInfo = reClassTime.exec(time).groups;\n    if (!timeInfo)\n        throw new Error(`Incorrect time format: ${time}`);\n    let datetime = new Date(date);\n    let hours = parseInt(timeInfo.hours)\n    let noonIncrement: number = 0;\n    if (timeInfo.isAfterNoon && hours < 12)\n        noonIncrement = 12;\n    else if (!timeInfo.isAfterNoon && hours == 12)\n        noonIncrement = -12;\n    datetime.setUTCHours(hours + noonIncrement);\n    datetime.setUTCMinutes(parseInt(timeInfo.minutes));\n    return datetime;\n}\n\nfunction setTrueWeekday(date: Date, byday: string) {\n    byday = byday.toLowerCase()\n    while (!byday.includes(date.toUTCString().slice(0, 2).toLowerCase()))\n        date.setUTCDate(date.getUTCDate() + 1)\n}\n\n\n// MAIN\n\n// We assign it to window to be able to use it from html/js on the webpage.\n// The reason we need it is because bundlers such as webpack don't leak any info about bundled packages.\n// @ts-ignore\nwindow.convertToIcal = async function (schedule: string, isUCF: boolean, timezone: string) {\n    schedule = schedule.trim();\n    if (!schedule)\n        throw new Error(\"You inputted an empty schedule.\");\n    let class_sections = parseSchedule(schedule);\n    if (!class_sections)\n        throw new Error(\"Couldn't find any class sections in your schedule. Please, check your schedule or contact my author.\");\n    let firstSectionStartDate = class_sections[0].dtstart;\n    let year = firstSectionStartDate.getUTCFullYear();\n    let term = getSectionTerm(firstSectionStartDate);\n    let no_school_events: IcalEvent[];\n    if (isUCF)\n        no_school_events = await getUCFNoSchoolEvents(year, term);\n    else\n        no_school_events = [];\n    let exdates = make_timeless_exdates(no_school_events);\n    for (let section of class_sections)\n        add_exdates(section, exdates);\n    return createIcalString(`Classes ${term} ${year}`, timezone, class_sections, no_school_events)\n}\n\nfunction getSectionTerm(sectionDate: Date): string {\n    let start_month = sectionDate.getUTCMonth();\n    if (7 <= start_month && start_month <= 9)\n        return \"Fall\";\n    else if (0 <= start_month && start_month <= 2)\n        return \"Spring\";\n    else\n        return \"Summer\";\n}\n\n\nfunction make_timeless_exdates(no_school_events: IcalEvent[]): Date[] {\n    let dates = [];\n    for (let noSchoolEvent of no_school_events) {\n        let day_count = (noSchoolEvent.dtend.getTime() - noSchoolEvent.dtstart.getTime()) / NUMBER_OF_MILLIS_IN_DAY;\n        if (day_count > 1)\n            for (let i = 0; i < day_count + 1; i++) {\n                let newDate = new Date(noSchoolEvent.dtstart);\n                newDate.setUTCDate(newDate.getUTCDate() + i);\n                dates.push(newDate);\n            }\n        else\n            dates.push(noSchoolEvent.dtstart);\n    }\n    console.log(dates.map((d) => {\n        return d.toUTCString()\n    }))\n    return dates;\n}\n\n// If DTSTART is a date-time value then EXDATEs must also be date-times (c) RFC5545\nfunction add_exdates(icalEvent: ClassSectionEvent, exdates: Date[]) {\n    let hours = icalEvent.dtstart.getUTCHours();\n    let minutes = icalEvent.dtstart.getUTCMinutes();\n    let exdatesCopies = [];\n    for (let exdate of exdates) {\n        if (!icalEvent.rrule.byDay.toLowerCase().includes(exdate.toUTCString().slice(0, 2).toLowerCase()))\n            continue;\n        let newDate = new Date(exdate.getTime());\n        newDate.setUTCHours(hours);\n        newDate.setUTCMinutes(minutes);\n        exdatesCopies.push(newDate);\n    }\n    icalEvent.exclude = exdatesCopies;\n}\n// PARSING\n\nfunction parseSchedule(schedule: string): ClassSectionEvent[] {\n    schedule = normalizeWhitespace(schedule);\n    const classNames = schedule.match(reClassName)\n    if (!classNames)\n        throw new Error(\"Couldn't find any class sections in your schedule. Please, check your schedule or contact my author.\")\n    const classSectionBatches = schedule.split(reClassName);\n    classSectionBatches.shift() // classSectionBatches[0] == ''\n    let all_class_sections = [];\n    for (let i = 0; i < classNames.length; i++) {\n        let rawSectionBatch = classSectionBatches[i];\n        // In case we get a class without class times, handling it seems unnecessary as it is most likely a fully online\n        // class.\n        // TODO: What if the class info somehow contains dropped/withdrawn but in some other section? Ex: Prof name\n        // Idea: Drop one of your classes at the beginning of some semester and see if it works.\n        if (rawSectionBatch.includes(\"Dropped\") || rawSectionBatch.includes(\"Withdrawn\"))\n            continue;\n        let sectionBatch = getAllRegexMatches(rawSectionBatch, reClassSection)\n        let sectionType: string;\n        let lastSectionType: string = \"\";\n        for (let section of sectionBatch) {\n            let info: any = section.groups;\n            if (sectionType = info.sectionType)\n                lastSectionType = sectionType;\n            all_class_sections.push(createClassSection(\n                classNames[i], lastSectionType, info.weekdays,\n                info.startTime, info.endTime, info.location,\n                info.professors, info.dtstart, info.dtend\n            ))\n        }\n    }\n    return all_class_sections\n}\n\nfunction normalizeWhitespace(str: string): string {\n    return str.replace(reLeadingLineWhitespace, '').replace(reEndingLineWhitespace, '').replace(/\\n+/gm, \"\\n\");\n}\n\nfunction getAllRegexMatches(str: string, regex: RegExp): RegExpExecArray[] {\n    let matches: RegExpExecArray[] = [];\n    let match: RegExpExecArray | null;\n    while ((match = regex.exec(str)) !== null)\n        matches.push(match);\n    return matches;\n}\n\nasync function getUCFNoSchoolEvents(year: number, term: string): Promise<IcalEvent[]> {\n    let json;\n    try {\n        json = await (await fetch(`https://calendar.ucf.edu/json/${year}/${term}`)).json()\n    }\n    catch (exception) {\n        console.log(exception)\n        throw new Error(\"Couldn't connect to calendar.ucf.edu to get no-school events. Either check your internet connection and try again or uncheck 'I am a UCF student' tickbox.\");\n    }\n    let events = []\n    for (let event of json.terms[0].events) {\n        // Sometimes it has an event with no dtstart and no dtend called \"Study day\"\n        // This check also protects us against events with no summaries\n        if (event.tags && event.tags.includes(\"no-classes\") && event.dtstart && event.summary) {\n            let dtstart = new Date(event.dtstart);\n            let dtend: Date;\n            if (!event.dtend) {\n                dtend = new Date(dtstart.getTime());\n                dtend.setUTCDate(dtend.getUTCDate() + 1);\n            }\n            else\n                dtend = new Date(event.dtend);\n            let description: string = event.description || \"\";\n            description = description.trim();\n            events.push({\n                summary: event.summary.trim(),\n                dtstart: dtstart,\n                dtend: dtend,\n                description: description,\n            });\n        }\n    }\n    return events;\n}\n\n// Да пошли вы в жопу со своими JS-библиотеками. КТО-НИБУДЬ ВООБЩЕ МОЖЕТ РЕАЛИЗОВАТЬ ПОЛНЫЙ ФУНКЦИОНАЛ ICAL?\n// Миллион библиотек, но ни одной рабочей. Сам реализую.\n// P.s. https://xkcd.com/927/\n\nfunction createIcalString(name: string, timezone: string, classSections: ClassSectionEvent[], noSchoolEvents: IcalEvent[]): string {\n    let ics = new ICS(timezone);\n    let tz = `;TZID=${timezone}`\n    let creationDate = ics.toDatetime(new Date()) + \"Z\"\n    let ical = `\n    BEGIN:VCALENDAR\n    SUMMARY:${name}\n    PRODID:-//Ovsyanka83//UnischedulerTS//EN\n    VERSION:2.0\n    DTSTAMP:${creationDate}\n    CREATED:${creationDate}\n    LAST-MODIFIED:${creationDate}\n    `\n    for (let e of classSections)\n        ical += `\n        BEGIN:VEVENT\n        SUMMARY:${e.summary}\n        DESCRIPTION:${e.description}\n        LOCATION:${e.location}\n        DTSTART;VALUE=DATE-TIME${tz}:${ics.toDatetime(e.dtstart)}\n        DTEND;VALUE=DATE-TIME${tz}:${ics.toDatetime(e.dtend)}\n        RRULE:FREQ=WEEKLY;BYDAY=${e.rrule.byDay};INTERVAL=1;UNTIL=${ics.toDatetime(e.rrule.until)}Z\n        EXDATE:${ics.toExdateList(e.exclude)}\n        END:VEVENT\n        `\n    for (let e of noSchoolEvents)\n        ical += `\n        BEGIN:VEVENT\n        SUMMARY:${e.summary}\n        DESCRIPTION:${e.description}\n        DTSTART;VALUE=DATE${tz}:${ics.toDate(e.dtstart)}\n        DTEND;VALUE=DATE${tz}:${ics.toDate(e.dtend)}\n        END:VEVENT\n        `\n    ical += \"\\nEND:VCALENDAR\"\n    return ics.normalize(ical);\n}\n\nclass ICS {\n    timezone: string\n\n    constructor(timezone: string) {\n        this.timezone = timezone;\n    }\n\n    toDatetime(dt: Date): string {\n        // 20210411T090000\n        return `${this.toDate(dt)}T${this.toTime(dt)}`;\n    }\n\n    toDate(dt: Date): string {\n        // 20210411\n        return dt.getUTCFullYear() + pad(dt.getUTCMonth() + 1) + pad(dt.getUTCDate());\n    }\n\n    toTime(dt: Date): string {\n        // 093000\n        return pad(dt.getUTCHours()) + pad(dt.getUTCMinutes()) + pad(dt.getUTCSeconds());\n    }\n\n    toExdateList(dates: Date[]): string {\n        // EXDATE:20210118T090000Z,20210411T090000Z,20210412T090000Z\n        return dates.map(this.toDatetime, this).join(\",\")\n    }\n\n    // This is necessary because RFC 5545 does not allow:\n    //  trailing whitespace, blank lines, or lines longer than 75 chars\n    normalize(ical: string): string {\n        return foldLines(normalizeWhitespace(ical))\n    }\n\n}\n\nfunction pad(n: number): string {\n    if (n < 10)\n        return '0' + n;\n    else\n        return '' + n\n}\n\nfunction foldLines(text: string) {\n    return text.match(/[^\\r\\n]+/g)?.map(foldLine).join(\"\\r\\n\");\n}\n\nfunction foldLine(line: string) {\n    const parts = []\n    let length = 75\n    while (line.length > length) {\n        parts.push(line.slice(0, length))\n        line = line.slice(length)\n        length = 74\n    }\n    parts.push(line)\n    return parts.join('\\r\\n ')\n}","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[903]();\n"],"sourceRoot":""}